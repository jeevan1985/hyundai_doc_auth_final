# ==============================================================================
#            Master Configuration for the JK Image Similarity System
# ==============================================================================
# This file contains all the environment variables to configure the application.
# It acts as the master control panel. Edit the values here to change the
# behavior and architecture of your deployment.
#
# A .env.template file should be committed to Git, and users should be
# instructed to copy it to .env and fill in their secrets.
# ==============================================================================


# ==============================================================================
#                      --- 1. APPLICATION & SECURITY ---
# ==============================================================================
# These variables control core application behavior and security settings.

# --- Centralized logging directory ---
APP_LOG_DIR = D:/logs

# --- Flask Specific Settings ---
# Sets the operating environment for Flask.
# Options: development, production, testing
FLASK_CONFIG="development"

# --- Cryptographic Secret Key ---
# Used by web frameworks like Flask for securely signing session cookies and
# other security-related data.
# ðŸ”’ CRITICAL: For production, this MUST be replaced with a long, unpredictable,
# cryptographically secure random string.
SECRET_KEY="c1f9a8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5f4e3d2c1b0a9"

# --- API Keys ---
# These are the master keys for accessing the system's APIs.
# ðŸ”’ CRITICAL: For production, these should be replaced with newly generated keys.
ADMIN_API_USER_KEY="jk_pub_b4635bb3_JNw2KOXdtOuvd8jgRVXonwzgM0aab_OZnZ2NPWaCZgw"
# STANDARD_API_USER_KEY="your_standard_api_key"

# --- Generic Database URL (Optional) ---
# This is a generic variable that some frameworks can use to configure a database
# from a single line. It is commented out by default as we use specific variables below.
# Example for PostgreSQL: DATABASE_URL="postgresql://user:password@host:port/dbname"
# Example for MySQL: DATABASE_URL="mysql+pymysql://user:password@host:port/dbname"
# DATABASE_URL=""

# ==============================================================================
#                      --- 3. POSTGRESQL DATABASE CONFIGURATION ---
# ==============================================================================
# These variables define the connection details for your primary PostgreSQL server.
# To use SQLite instead of PostgreSQL, leave all these variables blank or comment them out.

# --- PostgreSQL Search Results Database ---
POSTGRES_DB=similar_docs_db
# This HOST variable is used when connecting from outside Docker. It will be
# ignored and overridden by the docker-compose.yaml file when running internally.
POSTGRES_HOST=192.168.1.203
POSTGRES_PORT=6432
POSTGRES_USER=jeevan
POSTGRES_PASSWORD=jeevan
# Optional: Define a custom table name for search results.
POSTGRES_TABLE_NAME=doc_similarity_results_hyundai
POSTGRES_APP_USER_TABLE_NAME = users

# --- PostgreSQL User Authentication Database ---
# If your user data is in a separate database on the same server, define it here.
# The init-multiple-databases.sh script will create it if it doesn't exist.
POSTGRES_USER_DB=image_similarity_users_db
POSTGRES_USER_HOST=192.168.1.203 # Typically the same host as above.
POSTGRES_USER_PORT=6432         # Typically the same port as above.
POSTGRES_USER_USER=jeevan
POSTGRES_USER_PASSWORD=jeevan
# Optional: Define a custom table name for users.
POSTGRES_USER_TABLE_NAME=users



# ==============================================================================
#                 --- 4. EDB (ENTERPRISEDB) SERVER CONFIGURATION (Alternative) ---
# ==============================================================================
# This section contains an alternative set of credentials for connecting to an
# EDB server instead of a standard PostgreSQL server. To use these, comment out
# the PostgreSQL section above and uncomment the lines in this section.

# --- EDB Server Search Results Database ---
# POSTGRES_DB=jk_new_db
# POSTGRES_HOST=localhost
# POSTGRES_PORT=5444
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=admin
# POSTGRES_TABLE_NAME=image_similarity_search_results


# --- EDB Server User Authentication Database ---
# POSTGRES_USER_AUTHENTICATE_DB=postgres
# POSTGRES_USER_AUTHENTICATE_DB_PASSWORD=admin
# POSTGRES_USER_AUTHENTICATE_HOST=localhost
# POSTGRES_USER_AUTHENTICATE_PORT=5444
# POSTGRES_USER_AUTHENTICATE_TABLE_NAME=users


# ==============================================================================
#                      --- 4. EXTERNAL HOST & PORT OVERRIDES (ADVANCED) ---
# ==============================================================================
# Use these variables to connect to EXISTING services running OUTSIDE of this
# Docker Compose stack. If these are commented out, the application will fall
# back to using the internal Docker service names (e.g., 'db', 'qdrant').
# This allows for "Bring Your Own Backend" and hybrid deployments.

# --- External PostgreSQL Server Override ---
# To connect to an existing PostgreSQL server, uncomment BOTH lines and set
# its IP/hostname and PORT.
# POSTGRES_HOST_EXTERNAL=192.168.1.100
# POSTGRES_PORT_EXTERNAL=5432

# --- External Qdrant Server Override ---
# To connect to an existing Qdrant server, uncomment BOTH lines and set
# its IP/hostname and PORT.
# Use 'host.docker.internal' to connect from a container to a service on the same host machine.
# QDRANT_HOST_EXTERNAL=host.docker.internal
# QDRANT_PORT_EXTERNAL=6333

# --- External Flask API Server Override ---
# To connect a GUI to an existing Flask API, uncomment BOTH lines.
# FLASK_API_HOST_EXTERNAL=host.docker.internal
# FLASK_API_PORT_EXTERNAL=5001

# --- External FastAPI Server Override ---
# To connect a GUI to an existing FastAPI, uncomment BOTH lines.
# FASTAPI_API_HOST_EXTERNAL=host.docker.internal
# FASTAPI_API_PORT_EXTERNAL=8000
IMAGE_SIM_API_KEY= demo_jk_pub_9bad7429_5i_DHKceVfoGAAymirT7TBoUQz1C79s_wW_W3JN_5BI
# ==============================================================================
#                      --- DEVELOPMENT ENVIRONMENT SYNC ---
# ==============================================================================
# These variables pass the host's user and group ID to Docker Compose.
# This solves all bind-mount permission issues for development.
# !!! IMPORTANT: These values MUST match the output of `id -u` and `id -g` on your host machine.
HOST_UID=1000
HOST_GID=1000


# ==============================================================================
#                      --- SCHEDULER SERVICE CONFIGURATION ---
# ==============================================================================
# Scheduler Service Configuration
# Copy this file to .env and adjust values for your environment

# Interval between runs in minutes (positive integer)
SCHEDULE_INTERVAL_MINUTES=1

# Absolute path to the Python interpreter to run the target script
# Example for Windows using venv: C:\\Users\\you\\venvs\\project\\Scripts\\python.exe
# Example for system Python: C:\\Python311\\python.exe or maybe for docker "PYTHON_EXECUTABLE_PATH=/opt/conda/envs/image-similarity-env/bin/python"
PYTHON_EXECUTABLE_PATH=C:\ProgramData\anaconda3\envs\image-similarity-env

# Absolute path to the target script (doc_image_verifier.py)
# Example: D:\\path_dirs\\hyundai_document_authenticator\\hyundai_document_authenticator\\doc_image_verifier.py
#SCRIPT_PATH=hyundai_document_authenticator\\hyundai_document_authenticator\\doc_image_verifier.py
SCRIPT_PATH=hyundai_document_authenticator\\doc_image_verifier.py

# Scheduler timezone. Use an IANA name (e.g., UTC, Asia/Kolkata) or "local"
TIMEZONE=local

# Whether to allow overlapping runs (true/false)
ALLOW_OVERLAP=false

# Startup gate for the scheduler (true/false). When false, the scheduler logs and exits.
ENABLE_SCHEDULER=true

# Output capture policy for the scheduler subprocess:
# - true  => buffer stdout/stderr and log at end (capture_output)
# - false => stream stdout/stderr line-by-line (default; lower memory)
SCHEDULER_CAPTURES_OUTPUT=false

# Arguments to pass to the target script (subcommand and options)
# For doc_image_verifier.py, a subcommand is required. Common examples:
#   - Run TIF search using config-defined folders:
#       SCRIPT_ARGS="search-doc"
#   - Build an index from TIFs (explicit folder override):
#       SCRIPT_ARGS="build-image-index --folder hyundai_document_authenticator\\data_real"
#   - Run search with runtime overrides:
#       SCRIPT_ARGS="search-doc --top-doc 7 --top-k 5"
# If your image_similarity_config.yaml already defines folders, simply use:
SCRIPT_ARGS="search-doc"
