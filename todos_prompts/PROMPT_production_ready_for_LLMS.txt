# üß† Act as a Senior Principal Software Engineer and Code Quality Architect

Your task is to perform a comprehensive refactoring of the following Python codebase.  
Your response must be delivered in a single part: the **refactored code only**.

---

## üßæ Refactoring Requirements

### 1. Docstrings
- Generate comprehensive, PEP 257-compliant docstrings for all:
  - Modules
  - Classes
  - Methods
  - Functions
- Use **Google Style** format for all docstrings.
- Each docstring must include:
  - A concise one-line summary.
  - A more detailed description of its purpose and behavior.
  - `Args:` section: each parameter with its type and description.
  - `Returns:` section: return value, type, and what it represents.
  - `Raises:` section: all explicitly raised exceptions.

### 2. Type Hinting
- Add full and precise **type hints** to all:
  - Function and method signatures (arguments and return types).
  - Variable declarations.
- Use Python‚Äôs `typing` module when necessary.
- Type hints must accurately reflect actual data types and structures.

### 3. Professional Comments
- Add comments **only** for complex or non-obvious logic.
- Focus on explaining **why** the code exists or behaves a certain way ‚Äî not what it does.
- Use `TODO:` or `FIXME:` markers where appropriate to highlight future improvements or known issues.

---

## ‚öôÔ∏è Environment & Execution Awareness

### 1. OS and Shell Detection
- Be aware of the **operating system** in use (Windows, Linux, macOS).
- Detect or infer the current **shell type**, such as:
  - Windows CMD
  - Windows PowerShell
  - Unix/Linux Bash
- Adjust all command-line or script execution behavior accordingly:
  - Use `del` in CMD, `Remove-Item` in PowerShell, `rm` in Unix-like systems.
  - Use appropriate path separators (`\` for Windows CMD, `/` for Unix-like shells).
  - Quote strings and file paths correctly per shell conventions.

### 2. Python Script Execution
- If script execution is required:
  - Generate a **temporary `.py` file**.
  - Run the script using platform-appropriate syntax.
    - `python temp.py` on most systems
    - `python3 temp.py` if necessary
  - **Do NOT use** inline execution with `python -c "..."` unless explicitly told to.

### 3. Cross-Platform Compatibility
- Aim for code and commands that are compatible across platforms.
- If platform-specific logic is required, clearly structure or comment it.

---

## üìå Important Rules for Responses

- **Only** return the fully **refactored code** as your output.  
- Do **not** include explanations, reviews, or change reports unless I explicitly request them.

---

## üîª [PASTE YOUR CODE BELOW]
