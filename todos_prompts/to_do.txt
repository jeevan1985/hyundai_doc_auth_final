
Below is a refined, professional prompt you can use later to implement the full refactoring safely and completely.

Title: Project Refactoring: Basic vs Professional Version Split (Upgrade-Safe Architecture)

Role
Act as a Senior Software Engineer and Codebase Refactoring Expert with strong experience in modular architecture, feature-flagging, dependency isolation, and upgrade-safe release strategies.

Objective
Prepare two variants of the project with a clean separation of concerns:

1) Basic Version (this task)
- Excludes all professional-tier features such as risk scoring, Qdrant indexing, and any advanced analytics.
- Must run independently with core/basic functionality intact and fully tested.

2) Professional Version (future)
- Includes risk scoring, Qdrant indexing, and other advanced capabilities.
- Re-enabled simply by restoring the professional modules/files to the Basic Version without any additional code changes or configuration edits.

Project Context
- Repository root: D:\frm_git\hyundai_doc_auth_final
- Target subsystem: hyundai_document_authenticator\core_engine\image_similarity_system\
- Examples of professional-only modules currently present:
  - qdrant_manager.py
  - risk_scoring.py
  - Any related advanced vector indexing, advanced ranking, or non-fallback scoring modules
- Examples of baseline/fallback modules that must remain:
  - risk_scoring_fallback.py
  - Any lightweight or minimal alternatives required for basic functionality

Strict Requirements
1) Analyze and Identify
- Enumerate all modules, imports, and code paths that implement professional features (e.g., Qdrant vector DB, advanced similarity/risk scoring).
- Enumerate all fallback or baseline components required to keep the Basic Version fully functional.
- Document explicit import relationships so it’s clear which modules are optional (professional) vs required (basic).

2) Remove or Disable Professional Features
- Safely remove or disable professional-only files and code paths from the Basic Version.
- Eliminate any runtime imports, indirect dependencies, or configuration entries that would attempt to load professional-only features when absent.
- Ensure the Basic Version runs cleanly with zero import or runtime errors.

3) Preserve Upgrade Compatibility
- Architect imports and feature detection so that simply adding back the removed professional modules (e.g., qdrant_manager.py, risk_scoring.py) will immediately re-enable those features with no code or config edits.
- Use clear extension points and optional imports (e.g., try/except imports or registry-based providers) so restored files plug in automatically.
- Do not modify shared abstractions, base classes, or public interfaces required by both variants.

4) Maintain Code Integrity and Standards
- Do not alter shared logic or cross-tier configuration schemas unless absolutely necessary for correctness.
- Keep fallback behavior (e.g., risk_scoring_fallback.py) intact and used by default in the Basic Version.
- Ensure testability remains strong; update or create tests that validate Basic Version behavior without professional modules present.

Deliverables
- Updated project codebase prepared for Basic Version deployment, with professional features cleanly removed or disabled.
- A concise Change Report that includes:
  - Summary of professional-only modules, imports, and code paths removed/disabled.
  - List of fallback/baseline mechanisms retained and how they’re wired in.
  - Verification steps (commands/scripts) to run the Basic Version end-to-end.
  - Confirmation and instructions that re-adding the professional modules restores full professional functionality with no further edits.

Non-Functional Expectations
- Reliability: Basic Version must run without professional dependencies installed.
- Maintainability: Clear separation of optional features using well-defined interfaces (e.g., provider pattern, registry, or plug-in architecture).
- Upgrade-Safe: No edits needed when restoring professional modules.
- Documentation: Update or create a README/UPGRADE.md explaining how Basic vs Professional variants are structured and how to restore professional features.

Execution Environment Awareness
- Be OS-aware for commands and scripts:
  - Windows CMD: use python and backslashes
  - Windows PowerShell: use python and backslashes
  - Linux/macOS Bash: use python3 and forward slashes
- When executing scripts:
  - Generate a temporary .py file; do not use python -c inline
- Prefer cross-platform commands; if platform-specific behavior is required, call it out in the Change Report.

Code Quality Standards
- Docstrings: Use PEP 257 Google-style docstrings on modules/classes/functions with Args, Returns, Raises.
- Type Hints: Full and precise type hints via Python typing.
- Style: Follow PEP 8; keep code clean, readable, and idiomatic.
- Comments: Only for non-obvious logic; explain the “why.”

Response Behavior
- Provide a Change Report only (no full code in chat if you can edit files directly).
- Change Report format:
  - Status: summary of completion
  - Details: what changed
  - Missing / Not Possible: explain once
  - Optional Recommendations: architectural or maintainability suggestions
- Pause after delivering the Change Report and await confirmation before further steps.

Acceptance Criteria
- Basic Version runs fully without professional features present.
- Re-adding the removed modules immediately reinstates professional features.
- No additional code changes or configuration edits are required to upgrade from Basic to Professional.
