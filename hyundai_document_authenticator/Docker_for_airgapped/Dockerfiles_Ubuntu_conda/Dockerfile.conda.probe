# ==============================================================================
#      ‚≠ê Conda System Probe & Dockerfile Snippet Generator (v1) ‚≠ê
# ==============================================================================
#
# --- üéØ PURPOSE ---
# This Dockerfile is a diagnostic tool for Conda-based images. Its job is to
# probe a Miniconda/Anaconda base image, create a sample environment, and
# generate a report with the key paths and best-practice Dockerfile snippets
# needed for a Conda-based multi-stage build.
#
# --- üõ†Ô∏è HOW TO USE ---
# Build this Dockerfile, passing the Conda base image you want to test as a
# build argument. For best results, use '--progress=plain'.
#
# --- ‚≠ê PRIMARY EXAMPLE COMMAND ---
# docker build --progress=plain --no-cache --build-arg BASE_IMAGE=continuumio/miniconda3:py310-latest -f Dockerfile.conda.probe .
#
# ==============================================================================

# Use a build argument to make the base image easily configurable.
ARG BASE_IMAGE=continuumio/miniconda3:py310-latest
FROM ${BASE_IMAGE}

# Switch to the root user to ensure we have permissions for all system checks.
USER root

# --- [Step 1/5] Print Report Header ---
RUN \
    echo "" && \
    echo "‚úÖ ============================================================" && \
    echo "‚úÖ           Conda System Probe Report" && \
    echo "‚úÖ ============================================================"

# --- [Step 2/5] Gather Conda and OS Info ---
RUN \
    set -e && \
    \
    echo "" && echo "üêç  CONDA DETAILS" && \
    echo "------------------------------------------------------------" && \
    conda --version && \
    conda info && \
    \
    echo "" && echo "üó∫Ô∏è  OS DETAILS" && \
    echo "------------------------------------------------------------" && \
    if [ -f /etc/os-release ]; then cat /etc/os-release; else echo "‚ö†Ô∏è  Could not find /etc/os-release"; fi

# --- [Step 3/5] Create a Test Environment ---
RUN \
    set -e && \
    echo "" && echo "üõ†Ô∏è  CONDA ENVIRONMENT ANALYSIS" && \
    echo "------------------------------------------------------------" && \
    echo "Creating a test environment named 'probe-env'..." && \
    # Create a small test environment with a common package.
    conda create -n probe-env python=3.10 flask --yes >/dev/null 2>&1 && \
    echo "‚úÖ Test environment 'probe-env' created successfully."

# --- [Step 4/5] Discover Environment Path ---
RUN \
    set -e && \
    # Find the full path to our newly created test environment.
    # 'conda info --envs' lists all environments and their paths.
    # We grep for our environment name and use awk to extract the path.
    PROBE_ENV_PATH=$(conda info --envs | grep 'probe-env' | awk '{print $NF}') && \
    \
    if [ -n "$PROBE_ENV_PATH" ]; then \
        echo "" && \
        echo "üí° DERIVED PATHS:" && \
        echo "   - Full Environment Path: ${PROBE_ENV_PATH}" && \
        echo "   - Executable Directory: ${PROBE_ENV_PATH}/bin" && \
        # Save the derived path to a file so the next RUN step can use it.
        echo "${PROBE_ENV_PATH}" > /tmp/conda_env_path.txt; \
    else \
        echo "‚ö†Ô∏è Could not find the path for 'probe-env'."; \
    fi

# --- [Step 5/5] Generate Conda-Specific Dockerfile Snippets ---
RUN \
    set -e && \
    echo "" && \
    echo "" && \
    echo "üõ†Ô∏è ============================================================" && \
    echo "üõ†Ô∏è     Generated Conda Dockerfile Snippets (Multi-Stage)" && \
    echo "üõ†Ô∏è ============================================================" && \
    echo "" && \
    \
    echo "# === Stage 1: Builder (Based on a Conda Image) ==========" && \
    echo "WORKDIR /app" && \
    echo "COPY environment.yml ." && \
    echo "# This single command creates the complete environment" && \
    echo "RUN conda env create -f environment.yml" && \
    echo "" && \
    \
    echo "# === Stage 2: Final Image (Based on a slim OS like debian:slim) =======" && \
    # Check if the temp file with our path exists before trying to generate snippets.
    if [ -f /tmp/conda_env_path.txt ]; then \
        # Read the path back from the temp file.
        ENV_PATH=$(cat /tmp/conda_env_path.txt) && \
        echo "# 1. Copy the entire Conda environment from the builder stage." && \
        echo "# This is the most critical step for reproducibility." && \
        echo "COPY --from=builder ${ENV_PATH} ${ENV_PATH}" && \
        echo "" && \
        echo "# 2. Add the environment's bin directory to the system PATH." && \
        echo "# This makes 'python', 'gunicorn', etc., directly executable." && \
        echo "ENV PATH ${ENV_PATH}/bin:\$PATH"; \
    else \
        echo "# ‚ö†Ô∏è Could not generate COPY/ENV snippets because the Conda path was not found."; \
    fi && \
    echo "" && \
    echo "" && \
    echo "‚úÖ ============================================================" && \
    echo "‚úÖ                     Report Complete" && \
    echo "‚úÖ ============================================================"