# ==============================================================================
#            DEVELOPMENT OVERRIDE for RHEL-based Environments
# ==============================================================================
#
# --- PURPOSE ---
# This file contains ONLY the overrides needed for a local RHEL development
# environment. It is designed to be MERGED with the main 'docker-compose.rhel.yml'
# file to create a complete and isolated development setup.
#
# --- KEY DEV FEATURES ---
#   - Creates a SEPARATE, isolated PostgreSQL database for development.
#   - Enables LIVE CODE RELOADING by mounting your source code into the container.
#   - Runs application servers in DEBUG mode.
#   - Is fully compatible with RHEL's SELinux security system.
#
# --- HOW TO RUN ---
# # 1. Start background services like the database
# docker-compose -f docker-compose.rhel.yml -f docker-compose.dev.rhel.yml --profile postgres up -d
#
# # 2. Run a one-off task (e.g., a CLI script)
# docker-compose -f docker-compose.rhel.yml -f docker-compose.dev.rhel.yml run --rm --build cli_runner <your_command>
# ==============================================================================

# ==============================================================================
#                 --- RHEL DEVELOPMENT OVERRIDE TEMPLATE (YAML ANCHOR) ---
# ==============================================================================
# This is a reusable template for all our application services in RHEL dev mode.
x-rhel-dev-app-overrides: &rhel-dev-overrides
  # --- OVERRIDE 1: Use the RHEL Development Dockerfile ---
  # The 'build' key here OVERRIDES the 'image' key from the base production file.
  # This tells Docker Compose to build the image locally using a Dockerfile
  # specifically designed for RHEL development.
  build:
    context: .
    dockerfile: Dockerfile.dev.rhel
    # ==============================================================================
    # <<< FIX 1: PASS HOST UID/GID TO THE BUILD PROCESS >>>
    # ==============================================================================
    # This passes the host's UID/GID (defined in the .env file) into the
    # Dockerfile.dev.rhel build process, allowing it to create a user that
    # matches the host user, fixing bind mount permission issues.
    args:
      HOST_UID: ${HOST_UID:-1001}
      HOST_GID: ${HOST_GID:-0}

  # --- OVERRIDE 2: Enable Live Code Reloading (RHEL Specific) ---
  # The 'volumes' key here completely REPLACES the volumes from the base file.
  #   - Path: We mount to '/opt/app-root/src', the standard for UBI/RHEL images.
  #   - ':z' flag: This is CRITICAL for RHEL. It applies the correct SELinux
  #     label to the host directory, granting the container permission to access it.
  # We MUST explicitly override the named volumes (`logs_data`, `instance_data`, etc.)
  # from the production file with bind mounts for development. Otherwise, Compose
  # would merge them, leaving the root-owned named volumes active.
  volumes:
    # 1. Mount the entire project for live code reloading.
    - .:/opt/app-root/src:z
    # 2. Explicitly override named volumes with local bind mounts.
    #    This ensures these directories are owned by the host user, not root.
    - ./instance:/opt/app-root/src/instance:z
    - ./logs:/opt/app-root/src/logs:z
    - ./downloads:/opt/app-root/src/downloads:z

  # --- OVERRIDE 3: Depend on the Correct Services for Dev ---
  # This ensures the app waits for the dev database (if profile is on) and Qdrant.
  depends_on:
    db:
      condition: service_healthy # The dependency is now required in dev.
    qdrant:
      condition: service_healthy
      required: false # Make this optional to match the production file logic.

# ==============================================================================
#                      --- DEVELOPMENT SERVICE DEFINITIONS ---
# ==============================================================================
services:
  # --- 1. PostgreSQL Development Database (OVERRIDE) ---
  # This 'db' service completely REPLACES the 'db' service from the main
  # 'docker-compose.rhel.yml' file, ensuring a totally isolated dev environment.
  db:
    # We still use profiles, so the dev database only starts when requested.
    profiles: ["postgres"]
    image: postgres:15-alpine
    container_name: postgres_db_rhel_dev_service # Use a distinct dev name.
    restart: unless-stopped
    volumes:
      # --- CRITICAL ---
      # Use a SEPARATE, RHEL-specific named volume to keep development data
      # isolated from the RHEL production data on the same host.
      - postgres_data_rhel_dev:/var/lib/postgresql/data
    env_file: .env
    environment:
      # For development, we typically only need a simple, single-database setup.
      # This uses the primary variables from your .env file.
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      # Expose the PostgreSQL port to the host. This allows you to connect
      # to the dev database with a local GUI tool like DBeaver or pgAdmin.
      # We map to host port 5433 to avoid conflicts if you have another
      # PostgreSQL instance running locally on the default port 5432.
      - "5433:5432"

  # --- 2. Qdrant Service ---
  # We do not need to redefine Qdrant. It will be inherited perfectly
  # from the main 'docker-compose.rhel.yml' file.

  # --- 3. Flask API Service (RHEL Development Mode) ---
  flask_api:
    <<: *rhel-dev-overrides # Inherit build, volume, and base dependency settings.
    # --- BEST PRACTICE FIX ---
    # Explicitly override the container name for clarity in development.
    container_name: flask_api_rhel_dev_service
    command: flask run --host=0.0.0.0 --port=5001 --debug

  # --- 4. FastAPI Service (RHEL Development Mode) ---
  fastapi_api:
    <<: *rhel-dev-overrides
    # --- BEST PRACTICE FIX ---
    container_name: fastapi_api_rhel_dev_service
    command: uvicorn fastapi_app.main:app --host 0.0.0.0 --port 8000 --reload

  # --- 5. GUI Service (RHEL Development Mode) ---
  gui:
    <<: *rhel-dev-overrides
    # --- BEST PRACTICE FIX ---
    container_name: gui_rhel_dev_service
    command: flask --app gui_app.app.py run --host=0.0.0.0 --port=8501 --debug
    depends_on:
      db:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      flask_api:
        condition: service_started

  # --- 6. FastAPI GUI Service (RHEL Development Mode) ---
  fastapi_gui:
    <<: *rhel-dev-overrides
    # --- BEST PRACTICE FIX ---
    container_name: fastapi_gui_rhel_dev_service
    command: uvicorn fastapi_gui.main:app --host 0.0.0.0 --port 8502 --reload
    depends_on:
      db:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      fastapi_api:
        condition: service_started

  # ==============================================================================
  # <<< FIX 2: ADD A CLI_RUNNER OVERRIDE FOR DEVELOPMENT >>>
  # ==============================================================================
  # This ensures that when you run a one-off `cli_runner` task, it uses the
  # RHEL development build (with the correct UID/GID) and the source code
  # bind mount, just like the other dev services.
  cli_runner:
    <<: *rhel-dev-overrides
    container_name: cli_runner_rhel_dev_service


# ==============================================================================
#                      --- DEVELOPMENT NAMED VOLUMES ---
# ==============================================================================
# This section formally declares any NEW named volumes introduced by this dev file.
volumes:
  postgres_data_rhel_dev:
    # All other volumes (qdrant_data_rhel, downloads_data_rhel, etc.) are
    # automatically inherited from the main docker-compose.rhel.yml file.