
############################################
## Running mock_api_server.py
############################################

python mock_api_server.py --key-table "D:\mock_api_TEST\filtered_rows.xlsx" --search-root "D:\mock_api_TEST\mock_api_server_images" --insert-token 001 --tail-len 5 --glob-suffix "_*.tif" --any-depth --debug --save-folder-location D:\jk\gitas\tif_doc_nd_image_similarity_search\TifDoc_nd_image_similarity_search\instance\database_images# More details on mock_api_server.py

# Folder-backed Mock API Server to test API mode using your own data and matching rules.
#
# What it does
# - Loads a key table (CSV/XLSX) containing columns like 사업자등록번호, 수신일자, 파일명, 업종명
# - Exposes an HTTP endpoint that accepts parameters:
#     comany_registration (maps to 사업자등록번호)
#     reception_date      (maps to 수신일자)
#     filename            (maps to 파일명)
#     comapany_name       (maps to 업종명)
# - Reuses the same filename matching logic as data_source.local (NameMapping + rglob) to find a TIF
#   under the provided search root folder (e.g., D:\\test_data).
# - Returns JSON with base64 of the matched TIF as {"image_b64": "...", "server_filename": "..."}.
#
# Usage
#   pip install flask pandas openpyxl pillow
#   python mock_api_server.py \
#     --key-table "D:/real_data_key/filtered_rows.xlsx" \
#     --search-root "D:/test_data" \
#     --tail-len 5 [--insert-token 001] --glob-suffix "_*.tif" --any-depth [--save-by-default] [--debug]
#
#   For debugging filename matching, add --debug to see verbose matching logs.
#
# ## one liner
#  python mock_api_server.py --key-table "D:/real_data_key/sample_data_keys.xlsx" --search-root "D:\real_data_key\images_test_key" --tail-len 5 --glob-suffix "_*.tif" --any-depth

#   Example request with save_to_folder:
#   GET:
#     http://127.0.0.1:5001/images?comany_registration=123456&reception_date=2024-08-15&filename=N20231004THA00001&comapany_name=SomeBiz&save_to_folder=true
#   POST:
#     curl -X POST "http://127.0.0.1:5001/images" \
#       -H "Content-Type: application/json" \
#       -d "{\"comany_registration\":\"123456\",\"reception_date\":\"2024-08-15\",\"filename\":\"N20231004THA00001\",\"comapany_name\":\"SomeBiz\",\"save_to_folder\":true}"
#
# Endpoint
#   POST/GET /images
#   Params:
#     comany_registration, reception_date, filename, comapany_name, save_to_folder
#   Behavior:
#     - If a row in the key table matches the provided values, the server uses the filename field
#       and applies the same name-mapping matching logic to locate a .tif/.tiff in search-root.
#     - If found, returns base64 of the TIF; else returns 404.
#     - If save_to_folder is true (true/1/yes/on), the server saves the matched TIFF. The save
#       location is determined by the --save-folder-location argument, defaulting to a 'searched'
#       subfolder within the original file's directory.
#
# Examples
#   GET:
#     http://127.0.0.1:5001/images?comany_registration=123456&reception_date=2024-08-15&filename=N20231004THA00001&comapany_name=SomeBiz&save_to_folder=true
#   POST:
#     curl -X POST "http://127.0.0.1:5001/images" \
#       -H "Content-Type: application/json" \
#       -d "{\"comany_registration\":\"123456\",\"reception_date\":\"2024-08-15\",\"filename\":\"N20231004THA00001\",\"comapany_name\":\"SomeBiz\",\"save_to_folder\":true}"


######################################
## Running mock_api_client.py
######################################

filename_mapper>python mock_api_client.py --endpoint http://127.0.0.1:5001/images --method POST --key-table "D:\mock_api_TEST\filtered_rows.xlsx" --file-name-column "파일명" --map comany_registration=사업자등록번호 --map reception_date=수신일자 --map company_name=업종명 --save-to-folder
# In detail:

Mock API Client for folder-backed TIFF server

Features
- Send GET/POST requests to the mock API server
- Support save_to_folder toggling per request
- Add arbitrary extra parameters from CLI
- (Optional) Build payload from a key table row (CSV/XLSX/JSON) by filename
- Decode the returned base64 image and save to a file for verification

Usage
  pip install requests pandas openpyxl pillow

  # Minimal: POST with filename, asking server to re-save the file
  python mock_api_client.py --endpoint http://127.0.0.1:5001/images --method POST \
      --filename N20231004THA00001 --save-to-folder

  # Include extra fields and save the response image to a local file
  python mock_api_client.py --endpoint http://127.0.0.1:5001/images --method POST \
      --filename N20231004THA00001 \
      --extra comany_registration=1234567890 --extra reception_date=2024-08-15 --extra company_name=업종ABC \
      --save-to-folder ./response_copy.tif

  # Auto-payload from key table (look up row by filename)
  python mock_api_client.py --endpoint http://127.0.0.1:5001/images --method POST \
      --filename N20231004THA00001 --key-table "D:/real_data_key/filtered_rows.xlsx" \
      --file-name-column "파일명" --map comany_registration=사업자등록번호 --map reception_date=수신일자 --map company_name=업종명

  # Batch mode: send requests for all filenames in a key table
  python mock_api_client.py --endpoint http://127.0.0.1:5001/images --method POST \
      --key-table "D:/real_data_key/filtered_rows.xlsx" --file-name-column "파일명" \
      --map comany_registration=사업자등록번호 --map reception_date=수신일자 --map company_name=업종명

Notes
- The server uses 'filename' for matching; other params are echoed and metadata is pulled from the key table row by filename when available.
- --save-to-folder: If used as a flag, asks the server to re-save the file. If given a path, saves the response image to that path on the client.
- Batch mode is enabled by providing --key-table without --filename.


# Using Curl

curl -Method POST -Uri "http://127.0.0.1:5001/images" -Headers @{ "Content-Type"="application/json" } -Body '{"filename":"N2023100400003THA00001"}'